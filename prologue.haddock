
The /Labeled IO/ (LIO) library provides information flow control for
incorporating untrusted code within Haskell applications.  Most code
should import module "LIO.LIO" and whichever label type the
application is using (e.g., "LIO.DCLabel").  The core functionality of
the library is documented in "LIO.TCB".

Warning:  For security, at a minimum untrusted code must not be
allowed to do any of the following:

  * Import "LIO.TCB",

  * Use any symbols with names ending @...TCB@,

  * Use the @foreign@ keyword,

  * Use functions such as 'unsafePerformIO', 'unsafeInterleaveIO',
    'inlinePerformIO',

  * Use language extensions such as Generalized Newtype Deriving and
    Stand-alone Deriving to extend LIO types (such as by deriving an
    instance of Show for Lref, or deriving an instance of the
    'MonadTrans' class for 'LIO', which would allow untrusted code to
    bypass all security with 'lift'),

  * Manually define @typeOf@ methods (as this would cause the
    supposedly safe 'cast' method to make usafe casts); automatically
    deriving @Typeable@ should be safe.

In general, pragmas and imports should be highly scrutinized.  For
example, most of the "Foreign" class of modules are probably
dangerous.

LIO was implemented by David Mazieres
(<http://www.scs.stanford.edu/~dm/>).

To obtain the latest source code, run:

>     git clone http://www.scs.stanford.edu/~dm/repos/lio.git
